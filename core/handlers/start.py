"""
/start greets a user
/help sends a list of aavailable commands
"""

from aiogram import F, Bot, types, Router, html
from aiogram.filters import Command, CommandStart
from aiogram.types import ReplyKeyboardRemove
from datetime import datetime, timedelta
from pytz import timezone
from ..utils.config import ADMIN_IDS
from core.utils.commands import user_commands, moderator_commands, admin_commands


router = Router()


# Collect all bot commands across scopes
COMMANDS = {
    cmd.command
    for cmd in (
        list(user_commands)
        + list(moderator_commands)
        + list(admin_commands)
    )
}


def is_real_command(text: str) -> bool:
    if not text or not text.startswith("/"):
        return False
    
    words = text.split()
    token = words[0]  # first word like /cmd@Bot
    token_wo_slash = token[1:]
    if "@" in token_wo_slash:
        base, botname = token_wo_slash.split("@", 1)
        # Only allow commands directed to this bot explicitly
        if botname != "DormitoryFAQBot":
            return False
    else:
        base = token_wo_slash
    
    # Check if command is valid
    if base not in COMMANDS:
        return False
    
    # If there are arguments, check if they contain lowercase
    if len(words) > 1:
        arguments = " ".join(words[1:])  # everything after the command
        if any(c.islower() for c in arguments):
            return False  # Mute if arguments contain lowercase
    
    return True


@router.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        f"<b>–ø—Ä–∏–≤—ñ—Ç, {html.unparse(message.from_user.first_name)} üòé</b>\n"
        + "—è - –±–æ—Ç—ñ–∫ –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ—Ç—å–æ–≥–æ –≥—É—Ä—Ç—É –ª–Ω—É.\n"
        + "–º–æ–∂–µ—à –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –≤ –º–µ–Ω—é.\n\n"
        + f"—è–∫—â–æ –º–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è —á–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó - <a href='tg://user?id={ADMIN_IDS[0]}'>–∑–≤–µ—Ä—Ç–∞–π—Å—è</a>",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer(
        f"<b>–ø—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!</b>\n\n"
        + "<b>–æ—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:</b>\n"
        + "‚Ä¢ /faq –ø—Ä–∏—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å–Ω—É —Å—Ç–∞—Ç—Ç—é\n"
        + "‚Ä¢ /vahta - –≥—Ä–∞—Ñ—ñ–∫ –≤–∞—Ö—Ç–µ—Ä—ñ–≤\n"
        + "‚Ä¢ /bunt i /rusoriz –∫–∏–¥–∞—é—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Å—Ç—ñ–∫–µ—Ä–∏\n"
        + "‚Ä¢ /weather_now i /weather_today –ø–æ–∫–∞–∑—É—é—Ç—å –ø–æ–≥–æ–¥—É –∑–∞—Ä–∞–∑ —ñ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ\n"
        + "‚Ä¢ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /donate –º–æ–∂–µ—à –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏—Ü—é –±–æ—Ç–∞\n\n"
        + f"—è–∫—â–æ –º–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è —á–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó - <a href='tg://user?id={ADMIN_IDS[0]}'>–∑–≤–µ—Ä—Ç–∞–π—Å—è</a>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove(),
    )


empty_router = Router()


@empty_router.message(F.dice, F.forward_date, F.chat.type == "supergroup")
async def forward_from(message: types.Message, bot: Bot):
    now = datetime.now()

    result = now + timedelta(hours=6)

    try:
        await bot.restrict_chat_member(
            message.chat.id,
            message.from_user.id,
            types.ChatPermissions(
                can_send_messages=False,
                can_send_audios=False,
                can_send_documents=False,
                can_send_photos=False,
                can_send_videos=False,
                can_send_video_notes=False,
                can_send_voice_notes=False,
                can_send_other_messages=False,
                can_send_polls=False,
            ),
            until_date=result,
        )
        await message.reply("üòá –≤–∏ —à–æ —Ç—É—Ç —Å–∞–º—ñ —Ö–∏—Ç—Ä—ñ? –º—É—Ç —Ö2")
    except Exception as e:
        print(e)


# @empty_router.message(
#     F.dice.emoji == "üé∞", F.dice.value != 64, F.chat.type == "supergroup"
# )
# async def dice(message: types.Message, bot: Bot):
#     # Get the current datetime
#     now = datetime.now()

#     result = now + timedelta(hours=3)

#     try:~
#         await bot.restrict_chat_member(
#             message.chat.id,
#             message.from_user.id,
#             types.ChatPermissions(
#                 can_send_messages=False,
#                 can_send_audios=False,
#                 can_send_documents=False,
#                 can_send_photos=False,
#                 can_send_videos=False,
#                 can_send_video_notes=False,
#                 can_send_voice_notes=False,
#                 can_send_other_messages=False,
#                 can_send_polls=False,
#             ),
#             until_date=result,
#         )
#         await message.reply("üìµ –Ω—î–ø–∞–≤—î–∑–ª–æ.. —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞ —Ç—Ä–∏ –≥–æ–¥–∏–Ω–∫–∏, –∞ –ø–æ–∫–∏ –≤ –º—É—Ç—ñ–∫!")
#     except Exception as e:
#         print(e)


# @empty_router.message(F.dice.emoji == "üé∞", F.chat.type == "supergroup")
# async def dice_win(message: types.Message):
#     await message.reply("üçæ –Ω–∞ –≥–æ–¥–∏–Ω–Ω–∏–∫—É —à–æ 15 —Ç—Ä–∞–≤–Ω—è? –∑–≤—ñ–¥–∫–∏ —É –Ω–∞—Å —Ç—É—Ç –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å??")


@empty_router.message(F.via_bot)
@empty_router.message(F.dice)
async def dice_delete(message: types.Message):
    await message.delete()


@empty_router.message(F.chat.type == "supergroup")
async def caps_lock_day_handler(message: types.Message, bot: Bot):
    # Check if today is October 22nd
    tz = timezone("Europe/Kiev")
    current_time = datetime.now(tz)
    
    print(f"DEBUG: Current date: {current_time.month}/{current_time.day}")
    print(f"DEBUG: Message text: '{message.text}'")
    print(f"DEBUG: Message caption: '{message.caption}'")
    
    if current_time.month == 10 and current_time.day == 22:
        # Check both text and caption for lowercase
        text_to_check = None
        
        if message.text:
            is_cmd = is_real_command(message.text)
            print(f"DEBUG: Text is_real_command: {is_cmd}")
            if not is_cmd:
                text_to_check = message.text
        elif message.caption:
            is_cmd = is_real_command(message.caption)
            print(f"DEBUG: Caption is_real_command: {is_cmd}")
            if not is_cmd:
                text_to_check = message.caption
            
        print(f"DEBUG: text_to_check: '{text_to_check}'")
        if text_to_check:
            has_lower = any(c.islower() for c in text_to_check)
            print(f"DEBUG: has_lowercase: {has_lower}")
            
        if text_to_check and any(c.islower() for c in text_to_check):
            print("DEBUG: MUTING USER!")
            # Mute user for 1 hour
            mute_until = current_time + timedelta(hours=1)
            
            try:
                await bot.restrict_chat_member(
                    message.chat.id,
                    message.from_user.id,
                    types.ChatPermissions(
                        can_send_messages=False,
                        can_send_audios=False,
                        can_send_documents=False,
                        can_send_photos=False,
                        can_send_videos=False,
                        can_send_video_notes=False,
                        can_send_voice_notes=False,
                        can_send_other_messages=False,
                        can_send_polls=False,
                    ),
                    until_date=mute_until,
                )
                await message.reply("–°–¨–û–ì–û–î–ù–Ü –î–ï–ù–¨ –ö–ê–ü–° –õ–û–ö–£. –•–¢–û –ü–ò–®–ï –õ–û–í–ï–†–ö–ï–ô–°–û–ú –ú–£–¢ –ù–ê –ì–û–î–ò–ù–£.")
            except Exception as e:
                print(f"Error muting user: {e}")


@empty_router.message(F.from_user.id == ADMIN_IDS[0], F.chat.type == "private")
async def empty(message: types.Message):
    await message.reply(message.html_text, parse_mode=None)
