"""
/start greets a user
/help sends a list of aavailable commands
"""

from aiogram import F, Bot, types, Router, html
from aiogram.filters import Command, CommandStart
from aiogram.types import ReplyKeyboardRemove
from datetime import datetime, timedelta
from ..utils.config import ADMIN_IDS


router = Router()


@router.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        f"<b>–ø—Ä–∏–≤—ñ—Ç, {html.unparse(message.from_user.first_name)} üòé</b>\n"
        + "—è - –±–æ—Ç—ñ–∫ –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ—Ç—å–æ–≥–æ –≥—É—Ä—Ç—É –ª–Ω—É.\n"
        + "–º–æ–∂–µ—à –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –≤ –º–µ–Ω—é.\n\n"
        + f"—è–∫—â–æ –º–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è —á–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó - <a href='tg://user?id={ADMIN_IDS[0]}'>–∑–≤–µ—Ä—Ç–∞–π—Å—è</a>",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer(
        f"<b>–ø—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!</b>\n\n"
        + "<b>–æ—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:</b>\n"
        + "‚Ä¢ /faq –ø—Ä–∏—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å–Ω—É —Å—Ç–∞—Ç—Ç—é\n"
        + "‚Ä¢ /vahta - –≥—Ä–∞—Ñ—ñ–∫ –≤–∞—Ö—Ç–µ—Ä—ñ–≤\n"
        + "‚Ä¢ /bunt i /rusoriz –∫–∏–¥–∞—é—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Å—Ç—ñ–∫–µ—Ä–∏\n"
        + "‚Ä¢ /weather_now i /weather_today –ø–æ–∫–∞–∑—É—é—Ç—å –ø–æ–≥–æ–¥—É –∑–∞—Ä–∞–∑ —ñ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ\n"
        + "‚Ä¢ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /donate –º–æ–∂–µ—à –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏—Ü—é –±–æ—Ç–∞\n\n"
        + f"—è–∫—â–æ –º–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è —á–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó - <a href='tg://user?id={ADMIN_IDS[0]}'>–∑–≤–µ—Ä—Ç–∞–π—Å—è</a>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove(),
    )


empty_router = Router()

@empty_router.message(
    F.dice, F.forward_from, F.chat.type == "supergroup"
)
async def forward_from(message: types.Message, bot: Bot):
    now = datetime.now()

    result = now + timedelta(hours=6)

    try:
        await bot.restrict_chat_member(
            message.chat.id,
            message.from_user.id,
            types.ChatPermissions(
                can_send_messages=False,
                can_send_audios=False,
                can_send_documents=False,
                can_send_photos=False,
                can_send_videos=False,
                can_send_video_notes=False,
                can_send_voice_notes=False,
                can_send_other_messages=False,
                can_send_polls=False,
            ),
            until_date=result,
        )
        await message.reply("üòá –≤–∏ —à–æ —Ç—É—Ç —Å–∞–º—ñ —Ö–∏—Ç—Ä—ñ? –º—É—Ç —Ö2")
    except Exception as e:
        print(e)


@empty_router.message(
    F.dice.emoji == "üé∞", F.dice.value != 64, F.chat.type == "supergroup"
)
async def dice(message: types.Message, bot: Bot):
    # Get the current datetime
    now = datetime.now()

    result = now + timedelta(hours=3)

    try:
        await bot.restrict_chat_member(
            message.chat.id,
            message.from_user.id,
            types.ChatPermissions(
                can_send_messages=False,
                can_send_audios=False,
                can_send_documents=False,
                can_send_photos=False,
                can_send_videos=False,
                can_send_video_notes=False,
                can_send_voice_notes=False,
                can_send_other_messages=False,
                can_send_polls=False,
            ),
            until_date=result,
        )
        await message.reply("üìµ –Ω—î–ø–∞–≤—î–∑–ª–æ.. —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞ —Ç—Ä–∏ –≥–æ–¥–∏–Ω–∫–∏, –∞ –ø–æ–∫–∏ –≤ –º—É—Ç—ñ–∫!")
    except Exception as e:
        print(e)


@empty_router.message(F.dice.emoji == "üé∞", F.chat.type == "supergroup")
async def dice_win(message: types.Message):
    await message.reply("üçæ –Ω–∞ –≥–æ–¥–∏–Ω–Ω–∏–∫—É —à–æ 15 —Ç—Ä–∞–≤–Ω—è? –∑–≤—ñ–¥–∫–∏ —É –Ω–∞—Å —Ç—É—Ç –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å??")


# @empty_router.message()
# async def empty():
#     pass
